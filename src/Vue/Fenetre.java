/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Vue;

import Controleur.ControleurClavier;
import Modele.Case;
import Modele.Partie;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;

/**
 *
 * @author Dylan
 */
public class Fenetre extends JFrame implements Observer {

    private JPanel PieceSuivante = new JPanel();
    private JMenu jMenu1 = new JMenu();
    private JMenu jMenu2 = new JMenu();
    private JMenuBar menuBar = new JMenuBar();
    private JPanel plateau = new JPanel();
    private JPanel menu = new JPanel();
    private JPanel principal = new JPanel();
    private JPanel bouttons = new JPanel();
    
    private Partie p;
    /**
     * Creates new form Fenetre
     */
    public Fenetre(Partie p) {
        super();
        build();
        this.p = p;
        addWindowListener(new WindowAdapter() {
             @Override
             public void windowClosing(WindowEvent arg0) {
                 super.windowClosing(arg0);
                 System.exit(0);
             }
         });
       /* ControleurClavier controleur = new ControleurClavier(this,p);
        addKeyListener(controleur);*/
        
    }

     private void build() {
         
         // Mise en place de la fenetre principal
         this.setTitle("Jeu du Tetris");
         this.setSize(430,500);
         
         // Mise en place du menu
         jMenu1.setText("Partie");
         jMenu2.setText("Help");
         menuBar.add(jMenu1);
         menuBar.add(jMenu2);
         this.setJMenuBar(menuBar);
         
         // Creation des lignes de séparation
         Border whiteline = BorderFactory.createLineBorder(Color.white,1);
         Border blackline = BorderFactory.createLineBorder(Color.black,1);
         
         // Mise en place des Panels
         principal.setLayout(new BorderLayout());
         plateau.setLayout(new GridLayout(20,10));
         menu.setLayout(new GridLayout(4,1));
         bouttons.setLayout(new GridBagLayout());
         PieceSuivante.setLayout(new GridLayout(4,4)); 
         
         // Positionnement des Panels dans le Panel principal
         principal.add(menu,"East");
         principal.add(plateau, "Center");
         principal.setBorder(blackline);
         
         // Positionnement dans le Panel "menu"
         menu.add(new JLabel("Piece Suivante"));
         menu.add(PieceSuivante);
         menu.add(bouttons);
        
        
         // Mise en place du plateau / grille de jeu
         for (int i = 0; i<200;i++){
            JComponent ptest = new Case();
            ptest.setBorder(whiteline);
            plateau.add(ptest);
         }
         
         // Mise en place du Panel bouttons
        Button gauche = new Button("Gauche");
        Button droite = new Button("Droite");
        Button bas = new Button("Bas"); 
        Button tourner = new Button("Tourner");
        /*GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        bouttons.add(gauche,gbc);
        gbc.gridy = 2;
        bouttons.add(droite,gbc);
        gbc.gridx = 2;
        gbc.gridy = 1;
        bouttons.add(bas,gbc);
        gbc.gridx = 0;
        bouttons.add(tourner,gbc);*/
        
        // Mise en place de la grille affichant la pièce suivante
        for (int i =0;i<16;i++){
            JComponent ptest = new Case();
            ptest.setBorder(whiteline);
            PieceSuivante.add(ptest);
        }
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.add(principal);
    }
     
    
    @Override
    public void update(Observable o, Object o1) {
        for (int i = 0; i < 20; i++) {
            for (int j = 0; j < 10; j++) {
                ((Case)plateau.getComponent(i*10+j)).ColorierCase(p.getGrille().getGrille()[i+3][j].getEtat());           
            }
        }
        for (int i =0;i<4;i++){
            for (int j=0;j<4;j++){
                ((Case)PieceSuivante.getComponent(i*4+j)).ColorierCase(p.getPieceSuivante().getPieceCourante()[p.getPieceSuivante().getPosition()][i*4+j]);
            }
        }
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

   

    
}
